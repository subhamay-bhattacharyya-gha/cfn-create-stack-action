# Multi-Environment CloudFormation Deployment
# This workflow demonstrates deploying to different environments with environment-specific parameters

name: Multi-Environment Deployment

on:
  push:
    branches: [main, develop]
    paths: ['infrastructure/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options: ['dev', 'staging', 'prod']
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        type: boolean
        default: false

jobs:
  determine-environment:
    name: Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      instance_type: ${{ steps.env.outputs.instance_type }}
      min_size: ${{ steps.env.outputs.min_size }}
      max_size: ${{ steps.env.outputs.max_size }}
    
    steps:
      - name: Determine Environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref_name }}" == "main" ]; then
            ENV="prod"
          elif [ "${{ github.ref_name }}" == "develop" ]; then
            ENV="staging"
          else
            ENV="dev"
          fi
          
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          
          # Set environment-specific parameters
          case $ENV in
            prod)
              echo "instance_type=t3.medium" >> $GITHUB_OUTPUT
              echo "min_size=2" >> $GITHUB_OUTPUT
              echo "max_size=10" >> $GITHUB_OUTPUT
              ;;
            staging)
              echo "instance_type=t3.small" >> $GITHUB_OUTPUT
              echo "min_size=1" >> $GITHUB_OUTPUT
              echo "max_size=3" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "instance_type=t3.micro" >> $GITHUB_OUTPUT
              echo "min_size=1" >> $GITHUB_OUTPUT
              echo "max_size=2" >> $GITHUB_OUTPUT
              ;;
          esac

  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy Application Infrastructure
        uses: your-org/cloudformation-deployment-action@v1
        with:
          stack-name: myapp-${{ needs.determine-environment.outputs.environment }}
          template-path: infrastructure/app-stack.yaml
          deployment-parameters: |
            {
              "Environment": "${{ needs.determine-environment.outputs.environment }}",
              "InstanceType": "${{ needs.determine-environment.outputs.instance_type }}",
              "MinSize": "${{ needs.determine-environment.outputs.min_size }}",
              "MaxSize": "${{ needs.determine-environment.outputs.max_size }}",
              "KeyPairName": "${{ vars.KEY_PAIR_NAME }}",
              "VpcId": "${{ vars.VPC_ID }}",
              "SubnetIds": "${{ vars.SUBNET_IDS }}"
            }
          cloudformation-tags: |
            {
              "Environment": "${{ needs.determine-environment.outputs.environment }}",
              "Project": "myapp",
              "ManagedBy": "GitHub Actions",
              "Repository": "${{ github.repository }}"
            }

      - name: Deploy Database Stack
        uses: your-org/cloudformation-deployment-action@v1
        with:
          stack-name: myapp-db-${{ needs.determine-environment.outputs.environment }}
          template-path: infrastructure/database-stack.yaml
          deployment-parameters: |
            [
              {"ParameterName": "Environment", "ParameterValue": "${{ needs.determine-environment.outputs.environment }}"},
              {"ParameterName": "DBInstanceClass", "ParameterValue": "db.t3.micro"},
              {"ParameterName": "DBName", "ParameterValue": "myapp"},
              {"ParameterName": "MasterUsername", "ParameterValue": "admin"},
              {"ParameterName": "VpcId", "ParameterValue": "${{ vars.VPC_ID }}"}
            ]
          cloudformation-tags: |
            {
              "Environment": "${{ needs.determine-environment.outputs.environment }}",
              "Component": "database",
              "Project": "myapp",
              "ManagedBy": "GitHub Actions"
            }

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: always()
    
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"
          # Add your notification logic here (Slack, Teams, etc.)
      
      - name: Notify Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          # Add your notification logic here (Slack, Teams, etc.)