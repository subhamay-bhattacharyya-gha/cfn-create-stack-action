# Conditional CloudFormation Deployment
# This workflow demonstrates conditional deployments based on file changes and branch protection

name: Conditional Infrastructure Deployment

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main]
    paths: ['infrastructure/**']

jobs:
  detect-changes:
    name: Detect Infrastructure Changes
    runs-on: ubuntu-latest
    outputs:
      infrastructure_changed: ${{ steps.changes.outputs.infrastructure }}
      database_changed: ${{ steps.changes.outputs.database }}
      networking_changed: ${{ steps.changes.outputs.networking }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changes
        id: changes
        run: |
          # Check for changes in different infrastructure components
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '^infrastructure/(app|compute)'; then
            echo "infrastructure=true" >> $GITHUB_OUTPUT
          else
            echo "infrastructure=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '^infrastructure/database'; then
            echo "database=true" >> $GITHUB_OUTPUT
          else
            echo "database=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '^infrastructure/(vpc|network)'; then
            echo "networking=true" >> $GITHUB_OUTPUT
          else
            echo "networking=false" >> $GITHUB_OUTPUT
          fi

  validate-templates:
    name: Validate CloudFormation Templates
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure_changed == 'true' || needs.detect-changes.outputs.database_changed == 'true' || needs.detect-changes.outputs.networking_changed == 'true'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Validate Templates
        run: |
          for template in infrastructure/*.yaml infrastructure/*.yml; do
            if [ -f "$template" ]; then
              echo "Validating $template..."
              aws cloudformation validate-template --template-body "file://$template"
            fi
          done

  deploy-networking:
    name: Deploy Networking Stack
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-templates]
    if: needs.detect-changes.outputs.networking_changed == 'true' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy VPC Stack
        uses: your-org/cloudformation-deployment-action@v1
        with:
          stack-name: myapp-vpc-${{ github.ref_name }}
          template-path: infrastructure/vpc-stack.yaml
          deployment-parameters: |
            {
              "Environment": "${{ github.ref_name }}",
              "VpcCidr": "10.0.0.0/16",
              "PublicSubnetCidr": "10.0.1.0/24",
              "PrivateSubnetCidr": "10.0.2.0/24"
            }
          cloudformation-tags: |
            {
              "Environment": "${{ github.ref_name }}",
              "Component": "networking",
              "Project": "myapp",
              "ManagedBy": "GitHub Actions"
            }

  deploy-database:
    name: Deploy Database Stack
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-templates, deploy-networking]
    if: always() && needs.detect-changes.outputs.database_changed == 'true' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy Database Stack
        uses: your-org/cloudformation-deployment-action@v1
        with:
          stack-name: myapp-database-${{ github.ref_name }}
          template-path: infrastructure/database-stack.yaml
          deployment-parameters: |
            {
              "Environment": "${{ github.ref_name }}",
              "DBInstanceClass": "db.t3.micro",
              "DBName": "myapp",
              "MasterUsername": "admin",
              "BackupRetentionPeriod": "7",
              "MultiAZ": "false"
            }

  deploy-application:
    name: Deploy Application Stack
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-templates, deploy-database]
    if: always() && needs.detect-changes.outputs.infrastructure_changed == 'true' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Deploy Application Stack
        uses: your-org/cloudformation-deployment-action@v1
        with:
          stack-name: myapp-application-${{ github.ref_name }}
          template-path: infrastructure/app-stack.yaml
          deployment-parameters: |
            {
              "Environment": "${{ github.ref_name }}",
              "InstanceType": "t3.small",
              "MinSize": "1",
              "MaxSize": "3",
              "DesiredCapacity": "2",
              "KeyPairName": "${{ vars.KEY_PAIR_NAME }}"
            }

  # Development environment deployment (for feature branches)
  deploy-dev:
    name: Deploy Development Environment
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-templates]
    if: needs.detect-changes.outputs.infrastructure_changed == 'true' && startsWith(github.ref, 'refs/heads/feature/')
    environment: development
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEV_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate Unique Stack Name
        id: stack-name
        run: |
          # Create a unique stack name for feature branches
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          STACK_NAME="myapp-dev-${BRANCH_NAME}-${{ github.run_number }}"
          echo "stack_name=$STACK_NAME" >> $GITHUB_OUTPUT

      - name: Deploy Development Stack
        uses: your-org/cloudformation-deployment-action@v1
        with:
          stack-name: ${{ steps.stack-name.outputs.stack_name }}
          template-path: infrastructure/dev-stack.yaml
          deployment-parameters: |
            {
              "Environment": "development",
              "InstanceType": "t3.micro",
              "MinSize": "1",
              "MaxSize": "1",
              "BranchName": "${{ github.ref_name }}"
            }

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ Development environment deployed successfully!\n\nStack Name: \`${{ steps.stack-name.outputs.stack_name }}\`\n\nThis environment will be automatically cleaned up when the PR is closed.`
            })

  cleanup-dev:
    name: Cleanup Development Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_DEV_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Delete Development Stack
        run: |
          BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          STACK_PATTERN="myapp-dev-${BRANCH_NAME}-*"
          
          # Find and delete stacks matching the pattern
          aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query "StackSummaries[?starts_with(StackName, 'myapp-dev-${BRANCH_NAME}-')].StackName" \
            --output text | while read stack_name; do
            if [ -n "$stack_name" ]; then
              echo "Deleting stack: $stack_name"
              aws cloudformation delete-stack --stack-name "$stack_name"
            fi
          done